/// <reference types="node" />
import * as BigInt from "big-integer";
export declare const EMPTY = "0";
export declare class ResourceId {
    offer: string;
    database: string;
    documentCollection: string;
    storedProcedure: string;
    trigger: string;
    userDefinedFunction: string;
    document: string;
    partitionKeyRange: string;
    user: string;
    conflict: string;
    permission: string;
    attachment: string;
    length: number;
    offerIdLength: number;
    DocumentByte: number;
    StoredProcedureByte: number;
    TriggerByte: number;
    UserDefinedFunctionByte: number;
    ConflictByte: number;
    PartitionKeyRangeByte: number;
    constructor();
    parse(id: string): ResourceId;
    newDatabaseId(dbId: string): typeof ResourceId;
    newDocumentCollectionId(databaseId: string, collectionId: string): ResourceId;
    newUserId(databaseId: string, userId: string): ResourceId;
    newPermissionId(userId: string, permissionId: string): ResourceId;
    newAttachmentId(documentId: string, attachmentId: string): ResourceId;
    tryParse(id: string): [boolean, ResourceId];
    static verify(id: string): [boolean, Buffer];
    static verifyBool(id: string): boolean;
    static fromBase64String(s: string): Buffer;
    static toBase64String(buffer: Buffer): string;
    isDatabaseId(): boolean;
    getDatabaseId(): ResourceId;
    getDocumentCollectionId(): ResourceId;
    getUniqueDocumentCollectionId(): string;
    getStoredProcedureId(): ResourceId;
    getTriggerId(): ResourceId;
    getUserDefinedFunctionId(): ResourceId;
    getConflictId(): ResourceId;
    getDocumentId(): ResourceId;
    getPartitonKeyRangeId(): ResourceId;
    getUserId(): ResourceId;
    getPermissionId(): ResourceId;
    getAttachmentId(): ResourceId;
    getOfferId(): ResourceId;
    getValue(): Buffer;
    toString(): string;
    static bigNumberReadIntBE(buffer: Buffer, offset: number, byteLength: number): BigInt.BigInteger;
}
